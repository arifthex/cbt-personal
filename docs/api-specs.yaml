openapi: 3.0.3
info:
  title: CBT & Training System API
  version: 1.1.0
  description: API untuk sistem CBT dengan role Admin, Pengajar, dan Siswa. (Revised for production readiness)

servers:
  - url: /api/v1 # URL relatif lebih fleksibel
    description: API Server

# 1. DEFINISI KEAMANAN (JWT BEARER TOKEN)
security:
  - BearerAuth: []

tags:
  - name: Auth
  - name: Admin - Users
  - name: Admin - Sync & Jobs
  - name: Admin - Content
  - name: Pengajar
  - name: Siswa

paths:
  # ======================================================
  # AUTH
  # ======================================================
  /auth/login:
    post:
      tags: [Auth]
      summary: Login user dan dapatkan JWT
      security: [] # Endpoint ini tidak perlu otentikasi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: JWT Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ======================================================
  # ADMIN - USER MANAGEMENT
  # ======================================================
  /admin/users:
    get:
      tags: [Admin - Users]
      summary: List semua user dengan paginasi
      parameters:
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/LimitQuery'
      responses:
        '200':
          description: Daftar user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Admin - Users]
      summary: Tambah user baru (jika mode manual aktif)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/users/{userId}:
    get:
      tags: [Admin - Users]
      summary: Dapatkan detail satu user
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      responses:
        '200':
          description: Detail user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Admin - Users]
      summary: Update informasi user
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        '200':
          description: User berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Admin - Users]
      summary: Hapus user
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      responses:
        '204':
          description: User berhasil dihapus
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # ======================================================
  # ADMIN - SYNC & JOBS
  # ======================================================
  /admin/users/sync/mode:
    get:
      tags: [Admin - Sync & Jobs]
      summary: Lihat mode sinkronisasi user yang aktif
      responses:
        '200':
          description: Mode aktif
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncMode'
    post:
      tags: [Admin - Sync & Jobs]
      summary: Set mode sinkronisasi user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncMode'
      responses:
        '200':
          description: Mode berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncMode'
        '400':
          $ref: '#/components/responses/BadRequest'

  /admin/users/sync/api:
    post:
      tags: [Admin - Sync & Jobs]
      summary: (Async) Mulai sinkronisasi user dari API eksternal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSyncInput'
      responses:
        '202':
          description: Permintaan sinkronisasi diterima dan sedang diproses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSubmissionResponse'

  /admin/users/sync/csv:
    post:
      tags: [Admin - Sync & Jobs]
      summary: (Async) Mulai import user via CSV
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '202':
          description: File diterima dan sedang diproses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSubmissionResponse'

  /admin/jobs/{jobId}:
    get:
      tags: [Admin - Sync & Jobs]
      summary: Cek status pekerjaan asinkron (sync/import)
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Status pekerjaan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # ======================================================
  # ADMIN - CONTENT MANAGEMENT (Placeholders for CRUD)
  # ======================================================
  /admin/pelatihan:
    post:
      tags: [Admin - Content]
      summary: Buat pelatihan baru
      responses:
        '201': { description: "Pelatihan dibuat" }
  /admin/materi:
    post:
      tags: [Admin - Content]
      summary: Buat materi baru
      responses:
        '201': { description: "Materi dibuat" }

  # ======================================================
  # PENGAJAR
  # ======================================================
  /pengajar/ujian:
    post:
      tags: [Pengajar]
      summary: Terbitkan ujian
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UjianInput'
      responses:
        '201':
          description: Ujian diterbitkan
        '400':
          $ref: '#/components/responses/BadRequest'

  /pengajar/kelas:
    get:
      tags: [Pengajar]
      summary: Lihat daftar kelas yang diampu dengan paginasi
      parameters:
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/LimitQuery'
      responses:
        '200':
          description: Daftar kelas
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Kelas'

  /pengajar/nilai/{examId}:
    get:
      tags: [Pengajar]
      summary: Lihat nilai siswa di ujian tertentu dengan paginasi
      parameters:
        - in: path
          name: examId
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/LimitQuery'
      responses:
        '200':
          description: Nilai siswa
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Nilai'

  # ======================================================
  # SISWA
  # ======================================================
  /siswa/ujian/{examId}/start:
    post:
      tags: [Siswa]
      summary: Mulai ujian (single attempt)
      parameters:
        - in: path
          name: examId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Soal ujian
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UjianDetail'
        '403':
          description: Ujian sudah pernah diambil atau tidak berhak
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /siswa/ujian/{examId}/submit:
    post:
      tags: [Siswa]
      summary: Submit jawaban ujian
      parameters:
        - in: path
          name: examId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JawabanInput'
      responses:
        '200':
          description: Jawaban berhasil tersimpan
        '400':
          $ref: '#/components/responses/BadRequest'

  /siswa/hasil/{examId}:
    get:
      tags: [Siswa]
      summary: Lihat hasil ujian
      parameters:
        - in: path
          name: examId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Hasil ujian
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HasilUjian'
        '404':
          $ref: '#/components/responses/NotFound'

# ======================================================
# COMPONENTS (Reusable parts of the API)
# ======================================================
components:
  # ----------------------------------------------------
  # Security Schemes
  # ----------------------------------------------------
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ----------------------------------------------------
  # Parameters (Reusable)
  # ----------------------------------------------------
  parameters:
    PageQuery:
      in: query
      name: page
      schema: { type: integer, default: 1 }
      description: Nomor halaman yang akan ditampilkan.
    LimitQuery:
      in: query
      name: limit
      schema: { type: integer, default: 20 }
      description: Jumlah item per halaman.
    UserIdPath:
      in: path
      name: userId
      required: true
      schema: { type: integer }

  # ----------------------------------------------------
  # Responses (Reusable)
  # ----------------------------------------------------
  responses:
    BadRequest:
      description: Bad Request / Kesalahan validasi input
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Unauthorized:
      description: Unauthorized / Token tidak valid atau tidak ada
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Forbidden:
      description: Forbidden / Role tidak memiliki akses
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    NotFound:
      description: Resource tidak ditemukan
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }

  # ----------------------------------------------------
  # Schemas (Data Models)
  # ----------------------------------------------------
  schemas:
    # UTILITY SCHEMAS
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: 'NOT_FOUND'
        message:
          type: string
          example: 'User dengan ID 123 tidak ditemukan.'
    Pagination:
      type: object
      properties:
        currentPage: { type: integer, example: 1 }
        totalPages: { type: integer, example: 10 }
        totalItems: { type: integer, example: 200 }
        limit: { type: integer, example: 20 }

    # AUTH SCHEMAS
    LoginInput:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
    LoginResponse:
      type: object
      properties:
        token: { type: string }
        role: { type: string, enum: [admin, pengajar, siswa] }

    # USER SCHEMAS
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string, format: email }
        role: { type: string, enum: [admin, pengajar, siswa] }
    UserInput:
      type: object
      required: [name, email, password, role]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
        role: { type: string, enum: [admin, pengajar, siswa] }
    UserUpdateInput:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, description: "Isi hanya jika ingin mengubah password" }
        role: { type: string, enum: [admin, pengajar, siswa] }

    # ADMIN SYNC & JOB SCHEMAS
    SyncMode:
      type: object
      properties:
        mode:
          type: string
          enum: [manual, api, csv]
    ApiSyncInput:
      type: object
      properties:
        sourceUrl: { type: string, format: url, example: "https://siakad.sch.id/api/v1/users" }
        apiKey: { type: string }
    JobSubmissionResponse:
      type: object
      properties:
        jobId: { type: string, format: uuid }
    JobStatusResponse:
      type: object
      properties:
        jobId: { type: string, format: uuid }
        status: { type: string, enum: [pending, processing, completed, failed] }
        progress: { type: number, format: float, example: 0.75 }
        result:
          type: object
          properties:
            totalImported: { type: integer }
            totalUpdated: { type: integer }
            totalFailed: { type: integer }
        error: { type: string, nullable: true }

    # CONTENT SCHEMAS
    PelatihanInput:
      type: object
      required: [title, materiIds]
      properties:
        title: { type: string }
        materiIds: { type: array, items: { type: integer } }
    MateriInput:
      type: object
      required: [title, content]
      properties:
        title: { type: string }
        content: { type: string }

    # UJIAN & NILAI SCHEMAS
    UjianInput:
      type: object
      required: [title, kelasId, bobot]
      properties:
        title: { type: string }
        kelasId: { type: integer }
        bobot:
          type: object
          properties:
            pg: { type: number, format: float, example: 0.6 }
            essay: { type: number, format: float, example: 0.4 }
    UjianDetail:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        questions:
          type: array
          items:
            type: object
            properties:
              id: { type: integer }
              type: { type: string, enum: [pg, essay] }
              text: { type: string }
              options:
                type: array
                items: { type: string }
    JawabanInput:
      type: object
      properties:
        answers:
          type: array
          items:
            type: object
            properties:
              questionId: { type: integer }
              answer: { type: string }
    HasilUjian:
      type: object
      properties:
        examId: { type: integer }
        score: { type: number, format: float }
        details:
          type: array
          items:
            type: object
            properties:
              questionId: { type: integer }
              correct: { type: boolean }
              score: { type: number, format: float }
    Nilai:
      type: object
      properties:
        userId: { type: integer }
        nama: { type: string }
        score: { type: number, format: float }
    Kelas:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }